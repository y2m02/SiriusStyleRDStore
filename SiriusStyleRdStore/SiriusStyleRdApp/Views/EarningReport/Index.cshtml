@using SiriusStyleRd.Entities.ViewModels.EarningReport
@{
    ViewData["Title"] = "Ganancias";
}

<h1>Ganancias</h1>
<div class="row" style="text-align: center">
    <div class="col-sm-3">
    </div> 
    <div class="col-sm-3">
    </div>
    <div class="col-sm-3">
        @Html.Label("", "Total ganancias: RD$", new {style = "font-weight:bold"})@Html.Label("", "0.00", new {style = "font-weight:bold", id = "lblTotalEarned"})
    </div>
    <div class="col-sm-3">
        @Html.Label("", "Total pendiente: RD$", new {style = "font-weight:bold"})@Html.Label("", "0.00", new {style = "font-weight:bold", id = "lblTotalPending"})
    </div>
</div>
<div>
    @(Html.Kendo().Grid<EarningReportViewModel>
        ()
        .Name("EarningReport")
        .Columns(columns =>
        {
            columns.Bound(c => c.Bale).Width(300);
            columns.Bound(c => c.Price).Width(90).Format("{0:n2}");
            columns.Bound(c => c.TotalEarned).Width(150).Format("{0:n2}");
            columns.Bound(c => c.TotalPending).Width(150).Format("{0:n2}");
        })
        .Resizable(r => r.Columns(true))
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(new[] {20, 35, 50})
            .Messages(msg => msg
                .Empty("Sin registros")
                .ItemsPerPage("registros por página")
                .First("Ir a la primera página")
                .Last("Ir a la última página")
                .Next("Página siguiente")
                .Previous("Página anterior")
                .Refresh("Refrescar")
                .Display("{0} - {1} de {2} registros")
                .Page("Página")
                .MorePages("Más páginas")))
        .Navigatable()
        .Sortable()
        .Filterable(filterable => filterable
            .Extra(true)
            .Operators(op =>
                op.ForString(str => str.Clear()
                    .Contains("Contiene")
                    .DoesNotContain("No contiene")
                    .IsEqualTo("Es igual a")
                    .IsNotEqualTo("Es diferente de")
                    .StartsWith("Comienza con")
                    .EndsWith("Termina con"))
                    .ForDate(date => date.Clear()
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .IsGreaterThanOrEqualTo("Mayor o igual que")
                        .IsGreaterThan("Despúes de")
                        .IsLessThanOrEqualTo("Hasta")
                        .IsLessThan("Antes de"))
                    .ForNumber(num => num.Clear()
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .IsGreaterThanOrEqualTo("Mayor o igual que")
                        .IsGreaterThan("Mayor que")
                        .IsLessThanOrEqualTo("Menor o igual que")
                        .IsLessThan("Menor que")))
            .Messages(msg => msg
                .Info("Mostrar registros con valor que:")
                .And("Y")
                .Or("O")
                .Filter("Filtrar")
                .Clear("Limpiar")))
        .Scrollable(s => s.Height(700))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
            .Read(read => read.Action("Get", "EarningReport"))
        )
        .Events(events => events.DataBound("dataBound")))
</div>
<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());

        var grid = window.$("#EarningReport").data("kendoGrid");
        var totalPending = 0;
        var totalEarned = 0;
        var rows = grid.items();

        window.$(rows).each(function(e) {
            var row = this;
            var dataItem = grid.dataItem(row);

            totalEarned += parseFloat(dataItem.TotalEarned);
            totalPending += parseFloat(dataItem.TotalPending);
        });

        window.$("#lblTotalEarned").html(totalEarned.toFixed(2));
        window.$("#lblTotalPending").html(totalPending.toFixed(2));
    }
</script>