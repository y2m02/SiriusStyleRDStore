@using SiriusStyleRd.Utility.Extensions
@using SiriusStyleRd.Entities.ViewModels.Order
@using SiriusStyleRd.Entities.Enums
@using Kendo.Mvc
@{
    ViewData["Title"] = "Órdenes";
    var index = 0;
}

<h1>Órdenes</h1>
<div>
    <div >
        <button id="createOrder" type="button" class="btn btn-primary">
            <i class="fas fa-plus"
               aria-hidden="true">
            </i>
            Crear
        </button>
    </div>
    <br/>
    <br/>
    <div class="row" style="text-align: center">
        <div class="col-sm-4">
            @Html.Label("", "Total pendientes: RD$", new {style = "font-weight:bold"})@Html.Label("", "0.00", new {style = "font-weight:bold", id = "lblTotalPending"})
        </div>
        <div class="col-sm-4">
            @Html.Label("", "Total pagas y enviadas: RD$", new {style = "font-weight:bold"})@Html.Label("", "0.00", new {style = "font-weight:bold", id = "lblTotalPaidAndShipped"})
        </div>
        <div class="col-sm-4">
            @Html.Label("", "Gran total: RD$", new {style = "font-weight:bold"})@Html.Label("", "0.00", new {style = "font-weight:bold", id = "lblGrantTotal"})
        </div>
    </div>
    <div>
        @(Html.Kendo().Grid<OrderViewModel>()
            .Name("Orders")
            .Columns(columns =>
            {
                columns.Bound(c => c.OrderNumber).Hidden().Groupable(false);
                columns.Bound(c => c.Customer).Width(200);
                columns.Bound(c => c.CreatedOn).Format("{0:dd/MM/yyyy}").Width(100);
                columns.Bound(c => c.Status).Width(120)
                    .Filterable(ftb => ftb
                        .Multi(true)
                        .CheckAll(false)
                        .BindTo(Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>()
                            .Select(status => new
                            {
                                Status = status.GetDescription()
                            }))
                        .Messages(msg => msg
                            .SelectedItemsFormat("{0} opciones seleccionadas"))
                    );
                columns.Bound(c => c.SubTotal).Width(95).Groupable(false).Format("{0:n2}");
                columns.Bound(c => c.Total).Width(95).Groupable(false).Format("{0:n2}");
                columns.Command(command => command.Custom("Editar").HtmlAttributes(new Dictionary<string, object> {["class"] = "editButton"})).Width(80);
                columns.Command(command => command.Custom("Cancelar").Click("showConfirm")).Width(80);
            }
            )
            .Scrollable(s=>s.Height(700))
            .Resizable(c => c.Columns(true))
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {20, 35, 50})
                .Messages(msg => msg
                    .Empty("Sin registros")
                    .ItemsPerPage("registros por página")
                    .First("Ir a la primera página")
                    .Last("Ir a la última página")
                    .Next("Página siguiente")
                    .Previous("Página anterior")
                    .Refresh("Refrescar")
                    .Display("{0} - {1} de {2} registros")
                    .Page("Página")
                    .MorePages("Más páginas")
                )
            )
            .Navigatable()
            .Sortable()
            .Groupable(g => g
                .Messages(m => m.Empty("Arrastre una columna hasta aquí para agrupar por dicha columna")))
            .Filterable(filterable => filterable
                .Extra(true)
                .Operators(op =>
                    op.ForString(str => str.Clear()
                        .Contains("Contiene")
                        .DoesNotContain("No contiene")
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .StartsWith("Comienza con")
                        .EndsWith("Termina con")
                        )
                        .ForDate(date => date.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Despúes de")
                            .IsLessThanOrEqualTo("Hasta")
                            .IsLessThan("Antes de")
                        )
                        .ForNumber(num => num.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Mayor que")
                            .IsLessThanOrEqualTo("Menor o igual que")
                            .IsLessThan("Menor que")
                        )
                )
                .Messages(msg => msg
                    .Info("Mostrar registros con valor que:")
                    .And("Y")
                    .Or("O")
                    .Filter("Filtrar")
                    .Clear("Limpiar")
                )
            )
            .HtmlAttributes(new {style = "width:100%;"})
            .ClientDetailTemplateId("productTemplate")
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .ServerOperation(false)
                .Sort(s => s.Add("Status").Ascending())
                .Model(model => model.Id(p => p.OrderNumber))
                .Read(read => read.Action("GetAll", "Order"))
            .Group(group => group.Add("Status", typeof(string), ListSortDirection.Ascending))
            )
            .Events(events => events.DataBound("dataBound")))
    </div>
</div>

@await Html.PartialAsync("../Product/ImagePartial")
@await Html.PartialAsync("OrderDetail")

<div class="modal fade" id="myCancellationModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Confirmación</h4>
            </div>
            <div class="modal-body">
                Está a punto de cancelar esa order
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btnConfirm" onclick="cancelOrder()">Confirmar</button>
                <button type="button" id="btnCancel" class="btn btn-danger" data-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<script src="~/js/order.js"></script>