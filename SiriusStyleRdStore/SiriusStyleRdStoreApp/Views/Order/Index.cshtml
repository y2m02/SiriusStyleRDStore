@using SiriusStyleRdStore.Utility.Extensions
@using SiriusStyleRdStore.Entities.ViewModels.Order
@using SiriusStyleRdStore.Entities.Enums
@{
    ViewData["Title"] = "Órdenes";
    var index = 0;
}

<h1>Órdenes</h1>
<div>
    <div>
        <button id="createOrder" type="button" class="btn btn-primary">Crear</button>
        <br/>
        <br/>
    </div>

    <div>
        @(Html.Kendo().Grid<OrderViewModel>()
            .Name("Orders")
            .Columns(columns =>
            {
                columns.Bound(c => c.OrderNumber).Hidden().Groupable(false);
                columns.Bound(c => c.Customer).Width(200);
                columns.Bound(c => c.CreatedOn).Format("{0:dd/MM/yyyy}").Width(100);
                columns.Bound(c => c.Status).Width(90)
                    .Filterable(ftb => ftb
                        .Multi(true)
                        .CheckAll(false)
                        .BindTo(Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>()
                            .Select(status => new
                            {
                                Status = status.GetDescription()
                            }))
                        .Messages(msg => msg
                            .SelectedItemsFormat("{0} opciones seleccionadas"))
                    );
                columns.Bound(c => c.SubTotal).Width(100).Groupable(false).Format("{0:n2}");
                columns.Bound(c => c.Total).Width(100).Groupable(false).Format("{0:n2}");
                columns.Command(command => command.Custom("Editar").HtmlAttributes(new Dictionary<string, object> {["class"] = "editButton"})).Width(80);
                columns.Command(command => command.Custom("Cancelar").Click("showConfirm")).Width(80);
            }
            )
            .Resizable(c => c.Columns(true))
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {20, 35, 50})
                //.ButtonCount(5)
                .Messages(msg => msg
                    .Empty("Sin registros")
                    .ItemsPerPage("registros por página")
                    .First("Ir a la primera página")
                    .Last("Ir a la última página")
                    .Next("Página siguiente")
                    .Previous("Página anterior")
                    .Refresh("Refrescar")
                    .Display("{0} - {1} de {2} registros")
                    .Page("Página")
                    .MorePages("Más páginas")
                )
            )
            .Navigatable()
            .Sortable()
            .Groupable(g => g
                .Messages(m => m.Empty("Arrastre una columna hasta aquí para agrupar por dicha columna")))
            .Filterable(filterable => filterable
                .Extra(true)
                .Operators(op =>
                    op.ForString(str => str.Clear()
                        .Contains("Contiene")
                        .DoesNotContain("No contiene")
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .StartsWith("Comienza con")
                        .EndsWith("Termina con")
                        )
                        .ForDate(date => date.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Despúes de")
                            .IsLessThanOrEqualTo("Hasta")
                            .IsLessThan("Antes de")
                        )
                        .ForNumber(num => num.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Mayor que")
                            .IsLessThanOrEqualTo("Menor o igual que")
                            .IsLessThan("Menor que")
                        )
                )
                .Messages(msg => msg
                    .Info("Mostrar registros con valor que:")
                    .And("Y")
                    .Or("O")
                    .Filter("Filtrar")
                    .Clear("Limpiar")
                )
            )
            //.Scrollable(s => s.Height(700))
            .HtmlAttributes(new {style = "width:1000px;"})
            .ClientDetailTemplateId("productTemplate")
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .ServerOperation(false)
                //.Events(events => events.Error("error_handler"))
                .Sort(s => s.Add("Status").Ascending())
                .Model(model => model.Id(p => p.OrderNumber))
                .Read(read => read.Action("GetAll", "Order"))
            //.Group(group => group.Add("Status", typeof(string), ListSortDirection.Ascending))
            )
            .Events(events => events.DataBound("dataBound")))
    </div>
</div>

@await Html.PartialAsync("../Product/ImagePartial")
@await Html.PartialAsync("OrderDetail")

<div class="modal fade" id="myCancellationModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel">Confirmación</h4>
            </div>
            <div class="modal-body">
                Está a punto de cancelar esa order
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="btnConfirm" onclick="cancelOrder()">Confirmar</button>
                <button type="button" id="btnCancel" class="btn btn-danger" data-dismiss="modal">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    $("#createOrder").on("click",
        function() {
            window.location = "/Order/Upsert";
        });

    $("#Orders").delegate(".editButton",
        "click",
        function() {
            var grid = window.$("#Orders").data("kendoGrid");
            var rowData = grid.dataItem(window.$(this).closest("tr"));

            window.location = "/Order/Upsert?orderNumber=" + rowData.OrderNumber;

        });

    var orderNumber;
    function showConfirm(e) {
        e.preventDefault();
                
        var dataItem = this.dataItem(window.$(e.currentTarget).closest("tr"));
        orderNumber = dataItem.OrderNumber;

        window.$("#myCancellationModal").modal();
    }

    function cancelOrder() {
        document.body.style.cursor = 'wait';

        var order = {
            "OrderNumber": orderNumber
        }

        window.$.ajax({
            url: "/Order/Cancel",
            data: order,
            type: "POST",
            content: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                document.body.style.cursor = 'default';
                location.reload();
            },
            error: function (errorMessage) {
                document.body.style.cursor = 'default';
                alert(errorMessage.responseText);
            }
        });
    }
</script>