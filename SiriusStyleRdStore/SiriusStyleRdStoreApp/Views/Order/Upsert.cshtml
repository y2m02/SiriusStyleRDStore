@using SiriusStyleRdStore.Utility.Extensions
@using SiriusStyleRdStore.Entities.Enums
@using SiriusStyleRdStore.Entities.ViewModels.Product
@using SiriusStyleRdStore.Entities.ViewModels.Size
@model SiriusStyleRdStore.Entities.Requests.Order.OrderRequest
@{
    ViewData["Title"] = "Crear - Editar órden";

    var enums = Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>()
        .Select(w => new
        {
            Id = w,
            Value = w.GetDescription()
        });

    var statusSelectList = new SelectList(
        enums,
        "Id",
        "Value"
        );
}
<style>
    .form-control {
        border-radius: 0.25rem !important;
    }
</style>
<h1>Crear - Editar órden</h1>

<div>
    <div class="row">
        @Html.TextBoxFor(model => model.OrderNumber, new { id = "txtOrderNumber", hidden = true })
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.LabelFor(model => model.CustomerId)
            <div class="input-group mb-2 mr-sm-2">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">
                        <i class="fas fa-user-graduate "
                           aria-hidden="true">
                        </i>
                    </span>
                </div>
                @Html.DropDownListFor(model => model.CustomerId, new SelectList(ViewBag.Customers, "CustomerId", "FullName"), "Elija una opción", new { @class = "form-control", Id = "cbxCustomers", onchange = "removeErrorMessage('cbxCustomers','lblCustomersError')" })
                <span style="background-color: #3276b1; border-radius: 5px; padding-left: 12px;" class="btn input-group-addon" @*data-toggle="modal" data-target="#myModalSpecialty" onclick="clearTextBoxSpecialty()"*@>
                    <i style="color: white;" class="fas fa-plus-circle"
                       aria-hidden="true">
                    </i>
                </span>
            </div>
            <span id="lblCustomersError" class="text-danger"></span>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.LabelFor(model => model.Status)
            <div class="input-group mb-2 mr-sm-2">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">
                        <i class="fas fa-user-graduate "
                           aria-hidden="true">
                        </i>
                    </span>
                </div>
                @Html.DropDownListFor(model => model.Status, statusSelectList, "Elija una opción", new { @class = "form-control", Id = "cbxStatus", onchange = "removeErrorMessage('cbxStatus','lblStatusError')" })
            </div>
            <span id="lblStatusError" class="text-danger"></span>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.LabelFor(model => model.ShippingCost)
            <div class="input-group mb-2 mr-sm-2">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">
                        <i class="fas fa-user-graduate "
                           aria-hidden="true">
                        </i>
                    </span>
                </div>
                @Html.TextBoxFor(model => model.ShippingCost, new { @class = "form-control numericField", Id = "txtShippingCost" @*, oninput = "removeErrorMessage('txtShippingCost','lblShippingCostError')"*@})
                <span id="lblShippingCostError" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            @Html.LabelFor(model => model.Discount)
            <div class="input-group mb-2 mr-sm-2">
                <div class="input-group-prepend">
                    <span class="input-group-text" id="basic-addon1">
                        <i class="fas fa-user-graduate "
                           aria-hidden="true">
                        </i>
                    </span>
                </div>
                @Html.TextBoxFor(model => model.Discount, new { @class = "form-control numericField", Id = "txtDiscount" @*, oninput = "removeErrorMessage('txtDiscount','lblDiscountError')"*@})
                <span id="lblDiscountError" class="text-danger"></span>
            </div>
        </div>
    </div>
</div>
<br />
<br />
<div id="orderDetailsDiv">

    <div class="row">
        <div class="col-sm-8">

            @Html.Label("", "Elija los artículos:", new { style = "font-weight:bold" })
        </div>
        <div class="col-sm-4" style="text-align: right">
            @Html.Label("", "Subtotal: RD$", new { style = "font-weight:bold" }) @Html.Label("", "0.00", new { style = "font-weight:bold", id = "lblSubTotal" })
            <br />
            @Html.Label("", "Total: RD$", new { style = "font-weight:bold" }) @Html.Label("", "0.00", new { style = "font-weight:bold", id = "lblTotal" })
        </div>
    </div>
    <div class="row">
        <span id="lblProductsError" class="text-danger" style="padding-left: 15px;"></span>
    </div>
    @(Html.Kendo().Grid<ProductViewModel>()
        .Name("Products")
        .Columns(columns =>
        {
            columns.Bound(c => c.ProductCode).Hidden();
            columns.Select().Width(50);
            columns.Bound(c => c.Category).Width(100);
            columns.Bound(c => c.Description).Width(200)
                .ClientTemplate(@"<img src='../images/products/#=Image ?? 'No image.png'#' onclick='onClick(this);' class='rounded-circle' height='80' width='80' asp-append-version='true'/><div class='product-name'>#: Description #</div>");
            columns.Bound(c => c.Price).Width(75).Format("{0:n2}");
            columns.Bound(c => c.Size).Width(70)
                .Filterable(ftb => ftb
                    .Multi(true)
                    .CheckAll(false)
                    .BindTo(((IEnumerable<SizeViewModel>) ViewBag.Sizes)
                        .Select(size => new
                        {
                            Size = size.Description
                        }))
                    .Messages(msg => msg
                        .SelectedItemsFormat("{0} opciones seleccionadas"))
                );
        })
        .Resizable(c => c.Columns(true))
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(new[] {10, 15, 20})
            .Messages(msg => msg
                .Empty("Sin registros")
                .ItemsPerPage("registros por página")
                .First("Ir a la primera página")
                .Last("Ir a la última página")
                .Next("Página siguiente")
                .Previous("Página anterior")
                .Refresh("Refrescar")
                .Display("{0} - {1} de {2} registros")
                .Page("Página")
                .MorePages("Más páginas")))
        .Navigatable()
        .Sortable()
        .PersistSelection()
        .Filterable(filterable => filterable
            .Extra(true)
            .Operators(op =>
                op.ForString(str => str.Clear()
                    .Contains("Contiene")
                    .DoesNotContain("No contiene")
                    .IsEqualTo("Es igual a")
                    .IsNotEqualTo("Es diferente de")
                    .StartsWith("Comienza con")
                    .EndsWith("Termina con"))
                    .ForDate(date => date.Clear()
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .IsGreaterThanOrEqualTo("Mayor o igual que")
                        .IsGreaterThan("Despúes de")
                        .IsLessThanOrEqualTo("Hasta")
                        .IsLessThan("Antes de"))
                    .ForNumber(num => num.Clear()
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .IsGreaterThanOrEqualTo("Mayor o igual que")
                        .IsGreaterThan("Mayor que")
                        .IsLessThanOrEqualTo("Menor o igual que")
                        .IsLessThan("Menor que")))
            .Messages(msg => msg
                .Info("Mostrar registros con valor que:")
                .And("Y")
                .Or("O")
                .Filter("Filtrar")
                .Clear("Limpiar")))
        .Scrollable(s => s.Height(700))
        .Events(ev => ev.Change("onChange"))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(10)
            .ServerOperation(false)
            .Model(model => model.Id(p => p.ProductCode))
            .Read(read => read.Action("GetAllForOrderDetails", "Product", new {orderNumber = Model.OrderNumber}))
        )
        )
</div>
<div style="padding-bottom: 25px; padding-top: 10px;">
    <button type="button" class="btn btn-primary" style="float: left" id="btnGoBack">
        <i class="fas fa-arrow-left "
           aria-hidden="true">
        </i> Regresar
    </button>
    <div class="col-sm-12">
        <button type="button" class="btn btn-primary" style="float: right" id="btnSaveOrder">
            Guardar
            <i class="fab fa-telegram-plane"
               aria-hidden="true">
            </i>
        </button>
    </div>
</div>

@await Html.PartialAsync("../Product/ImagePartial")

<script>
    var grid;
    var shippingCost = 0;
    var discount = 0;
    var subTotal = 0;
    var totalPrices = 0;

    var checkedValues = [];

    $(function () {
        initializeShippingAndDiscount();

        var isFirstLoad = true;
        var isEmptyFilter = false;
        var codes = [];
        grid = window.$("#Products").data("kendoGrid");

        grid.bind("dataBound",
            function () {
                var rows = grid.items();

                if (grid.dataSource.filter() && rows.length == 0) {
                    codes = checkedValues;
                    isEmptyFilter = true;
                    return;
                }
                if (isEmptyFilter) {
                    window.$(rows).each(function (e) {
                        var row = this;
                        var dataItem = grid.dataItem(row);

                        if (codes.includes(dataItem.ProductCode)) {
                            grid.select(row);
                        }
                    });

                    isEmptyFilter = false;
                    return;
                }

                if (isFirstLoad) {
                    window.$(rows).each(function (e) {
                        var row = this;
                        var dataItem = grid.dataItem(row);

                        if (dataItem.OrderNumber != null) {
                            grid.select(row);
                        }
                    });

                    isFirstLoad = false;
                }
            });
    });

    function isValid() {
        var customerIdIsValid = buildError("cbxCustomers", "lblCustomersError");
        var statusIsValid = buildError("cbxStatus", "lblStatusError");
        var productsIsValid = true;

        var total = totalPrices - discount;

        if (total <= 0) {
            window.$("#lblProductsError").html("Debe seleccionar al menos un artículo");
            productsIsValid = false;
        }

        return customerIdIsValid
            && statusIsValid
            && productsIsValid;
    }

    function saveOrder() {
        document.body.style.cursor = 'wait';
        if (!isValid()) {
            document.body.style.cursor = 'default';
            return false;
        }
        var order = buildOrder();

        window.$.ajax({
            url: "/Order/AjaxUpsert",
            data: order,
            type: "POST",
            content: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                document.body.style.cursor = 'default';
                window.location = "/";
            },
            error: function (errorMessage) {
                document.body.style.cursor = 'default';
                alert(errorMessage.responseText);
            }
        });

        return true;
    }

    function buildOrder() {
        var orderNumber = window.$("#txtOrderNumber").val();
        var customerId = window.$("#cbxCustomers").val();
        var status = window.$("#cbxStatus").val();
        var subTotal = window.$("#lblSubTotal").html();
        var total = window.$("#lblTotal").html();
        var productCodes = checkedValues;

        return {
            "OrderNumber": orderNumber,
            "CustomerId": customerId,
            "Status": status,
            "ShippingCost": shippingCost,
            "Discount": discount,
            "SubTotal": subTotal,
            "Total": total,
            "ProductCodes": productCodes
        };
    }

    function onChange(e) {
        window.$("#lblProductsError").html("");
        checkedValues = getCheckedValues(grid);

        var rows = e.sender.select();
        totalPrices = 0;
        rows.each(function () {
            var dataItem = grid.dataItem(this);
            totalPrices += parseFloat(dataItem.Price);
        });

        subTotal = totalPrices + shippingCost;
        var total = totalPrices - discount;
        setTotalAndSubTotal(subTotal, total);
    }

    function getCheckedValues(grid) {
        var selectedRows = grid.selectedKeyNames();

        var productCodes = [];
        for (var i = 0; i < selectedRows.length; i++) {
            productCodes.push(selectedRows[i]);
        }

        return productCodes;
    }

    window.$("#txtShippingCost, #txtDiscount").on("input",
        function () {
            initializeShippingAndDiscount();

            setTotalAndSubTotal(totalPrices + shippingCost, totalPrices - discount);
        });


    function initializeShippingAndDiscount() {
        shippingCost = window.$("#txtShippingCost").val() == ""
            ? 0.00
            : parseFloat(window.$("#txtShippingCost").val());
        discount = window.$("#txtDiscount").val() == ""
            ? 0.00
            : parseFloat(window.$("#txtDiscount").val());
    }

    function setTotalAndSubTotal(subTotal, total) {
        window.$("#lblSubTotal").html(subTotal.toFixed(2));
        window.$("#lblTotal").html(total.toFixed(2));
    }

    $("#btnSaveOrder").on("click",
        function () {
            saveOrder();
        });

    $("#btnGoBack").on("click",
        function () {
            window.location = "/";
        });
</script>