@using SiriusStyleRdStore.Entities.ViewModels

@{
    ViewData["Title"] = "Clientes";
}


<h1>Clientes</h1>

@(Html.Kendo().Grid<CustomerViewModel>()
    .Name("Customers")
    .Columns(columns => {
        columns.Bound(c => c.CustomerId).Hidden();
        columns.Bound(c => c.FullName).Width(140);
        columns.Bound(c => c.PhoneNumber).Width(140);
        columns.Bound(c => c.Facebook).Width(100);
        columns.Bound(c => c.Instagram).Width(100);
        columns.Command(command => command.Destroy().Text("Eliminar")).Width(110);
    })
    .ToolBar(toolbar => {
        toolbar.Create().Text("Agrear");
        toolbar.Save()
            .SaveText("Guardar cambios")
            .CancelText("Cancelar cambios");
    })
    .Editable(editable =>
        editable.Mode(GridEditMode.InCell)
    )
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5)
        .Messages(msg => msg
            .Empty("Sin registros")
            .ItemsPerPage("registros por página")
            .First("Ir a la primera página")
            .Last("Ir a la última página")
            .Next("Página siguiente")
            .Previous("Página anterior")
            .Refresh("Refrescar")
            .Display("{0} - {1} de {2} registros")
            .Page("Página")
            .MorePages("Más páginas")))
    .Navigatable()
    .Sortable()
    //.Groupable()
    .Filterable(filterable => filterable
              .Extra(true)
              .Operators(op =>
                  op.ForString(str => str.Clear()
                      .Contains("Contiene")
                      .DoesNotContain("No contiene")
                      .IsEqualTo("Es igual a")
                      .IsNotEqualTo("Es diferente de")
                      .StartsWith("Comienza con")
                      .EndsWith("Termina con"))
                      .ForDate(date => date.Clear()
                          .IsEqualTo("Es igual a")
                          .IsNotEqualTo("Es diferente de")
                          .IsGreaterThanOrEqualTo("Mayor o igual que")
                          .IsGreaterThan("Despúes de")
                          .IsLessThanOrEqualTo("Hasta")
                          .IsLessThan("Antes de"))
                      .ForNumber(num => num.Clear()
                          .IsEqualTo("Es igual a")
                          .IsNotEqualTo("Es diferente de")
                          .IsGreaterThanOrEqualTo("Mayor o igual que")
                          .IsGreaterThan("Mayor que")
                          .IsLessThanOrEqualTo("Menor o igual que")
                          .IsLessThan("Menor que")))
              .Messages(msg => msg
                  .Info("Mostrar registros con valor que:")
                  .And("Y")
                  .Or("O")
                  .Filter("Filtrar")
                  .Clear("Limpiar")))
    .Scrollable()
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(5)
        .ServerOperation(false)
        //.Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.CustomerId))
        .Sort(s=>s.Add("CustomerName").Ascending())
        .Read(read=>read.Action("GetAll","Customer"))
        .Create(create=>create.Action("BatchCreate","Customer"))
        .Update(update=>update.Action("BatchUpdate","Customer"))
        .Destroy(delete=>delete.Action("BatchDelete","Customer"))
    ))